{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { LOCALE_ID, Injectable, Inject, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { formatDate, CommonModule } from '@angular/common';\n\nfunction CountdownComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"span\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.i.text, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction CountdownComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nvar CountdownStatus;\n\n(function (CountdownStatus) {\n  CountdownStatus[CountdownStatus[\"ing\"] = 0] = \"ing\";\n  CountdownStatus[CountdownStatus[\"pause\"] = 1] = \"pause\";\n  CountdownStatus[CountdownStatus[\"stop\"] = 2] = \"stop\";\n  CountdownStatus[CountdownStatus[\"done\"] = 3] = \"done\";\n})(CountdownStatus || (CountdownStatus = {})); // tslint:disable: no-inferrable-types\n\n\nclass CountdownGlobalConfig {\n  constructor(locale) {\n    this.locale = locale;\n    this.demand = false;\n    this.leftTime = 0;\n    this.format = 'HH:mm:ss';\n    this.timezone = '+0000';\n\n    this.formatDate = ({\n      date,\n      formatStr,\n      timezone\n    }) => {\n      return formatDate(new Date(date), formatStr, this.locale, timezone || this.timezone || '+0000');\n    };\n  }\n\n}\n\nCountdownGlobalConfig.ɵfac = function CountdownGlobalConfig_Factory(t) {\n  return new (t || CountdownGlobalConfig)(i0.ɵɵinject(LOCALE_ID));\n};\n\nCountdownGlobalConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CountdownGlobalConfig,\n  factory: CountdownGlobalConfig.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountdownGlobalConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }];\n  }, null);\n})();\n\nclass CountdownTimer {\n  constructor(ngZone) {\n    this.ngZone = ngZone;\n    this.fns = [];\n    this.commands = [];\n    this.nextTime = 0;\n    this.ing = false;\n  }\n\n  start() {\n    if (this.ing === true) {\n      return;\n    }\n\n    this.ing = true;\n    this.nextTime = +new Date();\n    this.ngZone.runOutsideAngular(() => {\n      this.process();\n    });\n  }\n\n  process() {\n    while (this.commands.length) {\n      this.commands.shift()();\n    }\n\n    let diff = +new Date() - this.nextTime;\n    const count = 1 + Math.floor(diff / 100);\n    diff = 100 - diff % 100;\n    this.nextTime += 100 * count;\n\n    for (let i = 0, len = this.fns.length; i < len; i += 2) {\n      let frequency = this.fns[i + 1]; // 100/s\n\n      if (0 === frequency) {\n        this.fns[i](count); // 1000/s\n      } else {\n        // 先把末位至0，再每次加2\n        frequency += 2 * count - 1;\n        const step = Math.floor(frequency / 20);\n\n        if (step > 0) {\n          this.fns[i](step);\n        } // 把末位还原成1\n\n\n        this.fns[i + 1] = frequency % 20 + 1;\n      }\n    }\n\n    if (!this.ing) {\n      return;\n    }\n\n    setTimeout(() => this.process(), diff);\n  }\n\n  add(fn, frequency) {\n    this.commands.push(() => {\n      this.fns.push(fn);\n      this.fns.push(frequency === 1000 ? 1 : 0);\n      this.ing = true;\n    });\n    return this;\n  }\n\n  remove(fn) {\n    this.commands.push(() => {\n      const i = this.fns.indexOf(fn);\n\n      if (i !== -1) {\n        this.fns.splice(i, 2);\n      }\n\n      this.ing = this.fns.length > 0;\n    });\n    return this;\n  }\n\n}\n\nCountdownTimer.ɵfac = function CountdownTimer_Factory(t) {\n  return new (t || CountdownTimer)(i0.ɵɵinject(i0.NgZone));\n};\n\nCountdownTimer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CountdownTimer,\n  factory: CountdownTimer.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountdownTimer, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass CountdownComponent {\n  constructor(locale, timer, defCog, cdr, ngZone) {\n    this.locale = locale;\n    this.timer = timer;\n    this.defCog = defCog;\n    this.cdr = cdr;\n    this.ngZone = ngZone;\n    this.frequency = 1000;\n    this._notify = {};\n    this.status = CountdownStatus.ing;\n    this.isDestroy = false;\n    this.i = {};\n    this.left = 0;\n    this.event = new EventEmitter();\n  }\n\n  set config(i) {\n    if (i.notify != null && !Array.isArray(i.notify) && i.notify > 0) {\n      i.notify = [i.notify];\n    }\n\n    this._config = i;\n  }\n\n  get config() {\n    return this._config;\n  }\n  /**\n   * Start countdown, you must manually call when `demand: false`\n   */\n\n\n  begin() {\n    this.status = CountdownStatus.ing;\n    this.callEvent('start');\n  }\n  /**\n   * Restart countdown\n   */\n\n\n  restart() {\n    if (this.status !== CountdownStatus.stop) {\n      this.destroy();\n    }\n\n    this.init();\n    this.callEvent('restart');\n  }\n  /**\n   * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover\n   */\n\n\n  stop() {\n    if (this.status === CountdownStatus.stop) {\n      return;\n    }\n\n    this.status = CountdownStatus.stop;\n    this.destroy();\n    this.callEvent('stop');\n  }\n  /**\n   * Pause countdown, you can use `resume` to recover again\n   */\n\n\n  pause() {\n    if (this.status === CountdownStatus.stop || this.status === CountdownStatus.pause) {\n      return;\n    }\n\n    this.status = CountdownStatus.pause;\n    this.callEvent('pause');\n  }\n  /**\n   * Resume countdown\n   */\n\n\n  resume() {\n    if (this.status === CountdownStatus.stop || this.status !== CountdownStatus.pause) {\n      return;\n    }\n\n    this.status = CountdownStatus.ing;\n    this.callEvent('resume');\n  }\n\n  callEvent(action) {\n    this.event.emit({\n      action,\n      left: this.left,\n      status: this.status,\n      text: this.i.text\n    });\n  }\n\n  init() {\n    const {\n      locale,\n      defCog\n    } = this;\n    const config = this.config = Object.assign(Object.assign(Object.assign({}, new CountdownGlobalConfig(locale)), defCog), this.config); // tslint:disable-next-line: no-bitwise\n\n    const frq = this.frequency = ~config.format.indexOf('S') ? 100 : 1000;\n    this.status = config.demand ? CountdownStatus.pause : CountdownStatus.ing;\n    this.getLeft(); // bind reflow to me\n\n    const _reflow = this.reflow;\n\n    this.reflow = (count = 0, force = false) => _reflow.apply(this, [count, force]);\n\n    if (Array.isArray(config.notify)) {\n      config.notify.forEach(time => {\n        if (time < 1) {\n          throw new Error(`The notify config must be a positive integer.`);\n        }\n\n        time = time * 1000;\n        time = time - time % frq;\n        this._notify[time] = true;\n      });\n    }\n\n    this.timer.add(this.reflow, frq).start();\n    this.reflow(0, true);\n  }\n\n  destroy() {\n    this.timer.remove(this.reflow);\n    return this;\n  }\n  /**\n   * 更新时钟\n   */\n\n\n  reflow(count = 0, force = false) {\n    if (this.isDestroy) {\n      return;\n    }\n\n    const {\n      status,\n      config,\n      _notify\n    } = this;\n\n    if (!force && status !== CountdownStatus.ing) {\n      return;\n    }\n\n    let value = this.left = this.left - this.frequency * count;\n\n    if (value < 1) {\n      value = 0;\n    }\n\n    this.i = {\n      value,\n      text: config.formatDate({\n        date: value,\n        formatStr: config.format,\n        timezone: config.timezone\n      })\n    };\n\n    if (typeof config.prettyText === 'function') {\n      this.i.text = config.prettyText(this.i.text);\n    }\n\n    this.cdr.detectChanges();\n\n    if (config.notify === 0 || _notify[value]) {\n      this.ngZone.run(() => {\n        this.callEvent('notify');\n      });\n    }\n\n    if (value === 0) {\n      this.ngZone.run(() => {\n        this.status = CountdownStatus.done;\n        this.destroy();\n        this.callEvent('done');\n      });\n    }\n  }\n  /**\n   * 获取倒计时剩余帧数\n   */\n\n\n  getLeft() {\n    const {\n      config,\n      frequency\n    } = this;\n    let left = config.leftTime * 1000;\n    const end = config.stopTime;\n\n    if (!left && end) {\n      left = end - new Date().getTime();\n    }\n\n    this.left = left - left % frequency;\n  }\n\n  ngOnInit() {\n    this.init();\n\n    if (!this.config.demand) {\n      this.begin();\n    }\n  }\n\n  ngOnDestroy() {\n    this.isDestroy = true;\n    this.destroy();\n  }\n\n  ngOnChanges(changes) {\n    if (!changes.config.firstChange) {\n      this.restart();\n    }\n  }\n\n}\n\nCountdownComponent.ɵfac = function CountdownComponent_Factory(t) {\n  return new (t || CountdownComponent)(i0.ɵɵdirectiveInject(LOCALE_ID), i0.ɵɵdirectiveInject(CountdownTimer), i0.ɵɵdirectiveInject(CountdownGlobalConfig), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nCountdownComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CountdownComponent,\n  selectors: [[\"countdown\"]],\n  hostVars: 2,\n  hostBindings: function CountdownComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"count-down\", true);\n    }\n  },\n  inputs: {\n    config: \"config\",\n    render: \"render\"\n  },\n  outputs: {\n    event: \"event\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 5,\n  consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"innerHTML\"]],\n  template: function CountdownComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CountdownComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, CountdownComponent_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.render);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.render)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(3, _c0, ctx.i));\n    }\n  },\n  directives: [i3.NgIf, i3.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountdownComponent, [{\n    type: Component,\n    args: [{\n      selector: 'countdown',\n      template: `\n    <ng-container *ngIf=\"!render\">\n      <span [innerHTML]=\"i.text\"></span>\n    </ng-container>\n    <ng-container *ngTemplateOutlet=\"render; context: { $implicit: i }\"></ng-container>\n  `,\n      host: {\n        '[class.count-down]': 'true'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }, {\n      type: CountdownTimer\n    }, {\n      type: CountdownGlobalConfig\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    config: [{\n      type: Input\n    }],\n    render: [{\n      type: Input\n    }],\n    event: [{\n      type: Output\n    }]\n  });\n})();\n\nclass CountdownModule {}\n\nCountdownModule.ɵfac = function CountdownModule_Factory(t) {\n  return new (t || CountdownModule)();\n};\n\nCountdownModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CountdownModule\n});\nCountdownModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [CountdownTimer],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountdownModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [CountdownTimer],\n      declarations: [CountdownComponent],\n      exports: [CountdownComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CountdownComponent, CountdownGlobalConfig, CountdownModule, CountdownStatus, CountdownTimer };","map":{"version":3,"sources":["D:/TEMPLATE/FrontEnd/landingpage-quiz/node_modules/ngx-countdown/fesm2015/ngx-countdown.mjs"],"names":["i0","LOCALE_ID","Injectable","Inject","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","Output","NgModule","i3","formatDate","CommonModule","CountdownStatus","CountdownGlobalConfig","constructor","locale","demand","leftTime","format","timezone","date","formatStr","Date","ɵfac","ɵprov","type","args","providedIn","undefined","decorators","CountdownTimer","ngZone","fns","commands","nextTime","ing","start","runOutsideAngular","process","length","shift","diff","count","Math","floor","i","len","frequency","step","setTimeout","add","fn","push","remove","indexOf","splice","NgZone","CountdownComponent","timer","defCog","cdr","_notify","status","isDestroy","left","event","config","notify","Array","isArray","_config","begin","callEvent","restart","stop","destroy","init","pause","resume","action","emit","text","Object","assign","frq","getLeft","_reflow","reflow","force","apply","forEach","time","Error","value","prettyText","detectChanges","run","done","end","stopTime","getTime","ngOnInit","ngOnDestroy","ngOnChanges","changes","firstChange","ChangeDetectorRef","ɵcmp","NgIf","NgTemplateOutlet","selector","template","host","encapsulation","None","changeDetection","OnPush","render","CountdownModule","ɵmod","ɵinj","imports","providers","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { LOCALE_ID, Injectable, Inject, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { formatDate, CommonModule } from '@angular/common';\n\nvar CountdownStatus;\n(function (CountdownStatus) {\n    CountdownStatus[CountdownStatus[\"ing\"] = 0] = \"ing\";\n    CountdownStatus[CountdownStatus[\"pause\"] = 1] = \"pause\";\n    CountdownStatus[CountdownStatus[\"stop\"] = 2] = \"stop\";\n    CountdownStatus[CountdownStatus[\"done\"] = 3] = \"done\";\n})(CountdownStatus || (CountdownStatus = {}));\n\n// tslint:disable: no-inferrable-types\nclass CountdownGlobalConfig {\n    constructor(locale) {\n        this.locale = locale;\n        this.demand = false;\n        this.leftTime = 0;\n        this.format = 'HH:mm:ss';\n        this.timezone = '+0000';\n        this.formatDate = ({ date, formatStr, timezone }) => {\n            return formatDate(new Date(date), formatStr, this.locale, timezone || this.timezone || '+0000');\n        };\n    }\n}\nCountdownGlobalConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownGlobalConfig, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Injectable });\nCountdownGlobalConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownGlobalConfig, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownGlobalConfig, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [LOCALE_ID]\n                    }] }];\n    } });\n\nclass CountdownTimer {\n    constructor(ngZone) {\n        this.ngZone = ngZone;\n        this.fns = [];\n        this.commands = [];\n        this.nextTime = 0;\n        this.ing = false;\n    }\n    start() {\n        if (this.ing === true) {\n            return;\n        }\n        this.ing = true;\n        this.nextTime = +new Date();\n        this.ngZone.runOutsideAngular(() => {\n            this.process();\n        });\n    }\n    process() {\n        while (this.commands.length) {\n            this.commands.shift()();\n        }\n        let diff = +new Date() - this.nextTime;\n        const count = 1 + Math.floor(diff / 100);\n        diff = 100 - (diff % 100);\n        this.nextTime += 100 * count;\n        for (let i = 0, len = this.fns.length; i < len; i += 2) {\n            let frequency = this.fns[i + 1];\n            // 100/s\n            if (0 === frequency) {\n                this.fns[i](count);\n                // 1000/s\n            }\n            else {\n                // 先把末位至0，再每次加2\n                frequency += 2 * count - 1;\n                const step = Math.floor(frequency / 20);\n                if (step > 0) {\n                    this.fns[i](step);\n                }\n                // 把末位还原成1\n                this.fns[i + 1] = (frequency % 20) + 1;\n            }\n        }\n        if (!this.ing) {\n            return;\n        }\n        setTimeout(() => this.process(), diff);\n    }\n    add(fn, frequency) {\n        this.commands.push(() => {\n            this.fns.push(fn);\n            this.fns.push(frequency === 1000 ? 1 : 0);\n            this.ing = true;\n        });\n        return this;\n    }\n    remove(fn) {\n        this.commands.push(() => {\n            const i = this.fns.indexOf(fn);\n            if (i !== -1) {\n                this.fns.splice(i, 2);\n            }\n            this.ing = this.fns.length > 0;\n        });\n        return this;\n    }\n}\nCountdownTimer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownTimer, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nCountdownTimer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownTimer });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownTimer, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\nclass CountdownComponent {\n    constructor(locale, timer, defCog, cdr, ngZone) {\n        this.locale = locale;\n        this.timer = timer;\n        this.defCog = defCog;\n        this.cdr = cdr;\n        this.ngZone = ngZone;\n        this.frequency = 1000;\n        this._notify = {};\n        this.status = CountdownStatus.ing;\n        this.isDestroy = false;\n        this.i = {};\n        this.left = 0;\n        this.event = new EventEmitter();\n    }\n    set config(i) {\n        if (i.notify != null && !Array.isArray(i.notify) && i.notify > 0) {\n            i.notify = [i.notify];\n        }\n        this._config = i;\n    }\n    get config() {\n        return this._config;\n    }\n    /**\n     * Start countdown, you must manually call when `demand: false`\n     */\n    begin() {\n        this.status = CountdownStatus.ing;\n        this.callEvent('start');\n    }\n    /**\n     * Restart countdown\n     */\n    restart() {\n        if (this.status !== CountdownStatus.stop) {\n            this.destroy();\n        }\n        this.init();\n        this.callEvent('restart');\n    }\n    /**\n     * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover\n     */\n    stop() {\n        if (this.status === CountdownStatus.stop) {\n            return;\n        }\n        this.status = CountdownStatus.stop;\n        this.destroy();\n        this.callEvent('stop');\n    }\n    /**\n     * Pause countdown, you can use `resume` to recover again\n     */\n    pause() {\n        if (this.status === CountdownStatus.stop || this.status === CountdownStatus.pause) {\n            return;\n        }\n        this.status = CountdownStatus.pause;\n        this.callEvent('pause');\n    }\n    /**\n     * Resume countdown\n     */\n    resume() {\n        if (this.status === CountdownStatus.stop || this.status !== CountdownStatus.pause) {\n            return;\n        }\n        this.status = CountdownStatus.ing;\n        this.callEvent('resume');\n    }\n    callEvent(action) {\n        this.event.emit({ action, left: this.left, status: this.status, text: this.i.text });\n    }\n    init() {\n        const { locale, defCog } = this;\n        const config = (this.config = Object.assign(Object.assign(Object.assign({}, new CountdownGlobalConfig(locale)), defCog), this.config));\n        // tslint:disable-next-line: no-bitwise\n        const frq = (this.frequency = ~config.format.indexOf('S') ? 100 : 1000);\n        this.status = config.demand ? CountdownStatus.pause : CountdownStatus.ing;\n        this.getLeft();\n        // bind reflow to me\n        const _reflow = this.reflow;\n        this.reflow = (count = 0, force = false) => _reflow.apply(this, [count, force]);\n        if (Array.isArray(config.notify)) {\n            config.notify.forEach((time) => {\n                if (time < 1) {\n                    throw new Error(`The notify config must be a positive integer.`);\n                }\n                time = time * 1000;\n                time = time - (time % frq);\n                this._notify[time] = true;\n            });\n        }\n        this.timer.add(this.reflow, frq).start();\n        this.reflow(0, true);\n    }\n    destroy() {\n        this.timer.remove(this.reflow);\n        return this;\n    }\n    /**\n     * 更新时钟\n     */\n    reflow(count = 0, force = false) {\n        if (this.isDestroy) {\n            return;\n        }\n        const { status, config, _notify } = this;\n        if (!force && status !== CountdownStatus.ing) {\n            return;\n        }\n        let value = (this.left = this.left - this.frequency * count);\n        if (value < 1) {\n            value = 0;\n        }\n        this.i = {\n            value,\n            text: config.formatDate({ date: value, formatStr: config.format, timezone: config.timezone }),\n        };\n        if (typeof config.prettyText === 'function') {\n            this.i.text = config.prettyText(this.i.text);\n        }\n        this.cdr.detectChanges();\n        if (config.notify === 0 || _notify[value]) {\n            this.ngZone.run(() => {\n                this.callEvent('notify');\n            });\n        }\n        if (value === 0) {\n            this.ngZone.run(() => {\n                this.status = CountdownStatus.done;\n                this.destroy();\n                this.callEvent('done');\n            });\n        }\n    }\n    /**\n     * 获取倒计时剩余帧数\n     */\n    getLeft() {\n        const { config, frequency } = this;\n        let left = config.leftTime * 1000;\n        const end = config.stopTime;\n        if (!left && end) {\n            left = end - new Date().getTime();\n        }\n        this.left = left - (left % frequency);\n    }\n    ngOnInit() {\n        this.init();\n        if (!this.config.demand) {\n            this.begin();\n        }\n    }\n    ngOnDestroy() {\n        this.isDestroy = true;\n        this.destroy();\n    }\n    ngOnChanges(changes) {\n        if (!changes.config.firstChange) {\n            this.restart();\n        }\n    }\n}\nCountdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownComponent, deps: [{ token: LOCALE_ID }, { token: CountdownTimer }, { token: CountdownGlobalConfig }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nCountdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: CountdownComponent, selector: \"countdown\", inputs: { config: \"config\", render: \"render\" }, outputs: { event: \"event\" }, host: { properties: { \"class.count-down\": \"true\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <ng-container *ngIf=\"!render\">\n      <span [innerHTML]=\"i.text\"></span>\n    </ng-container>\n    <ng-container *ngTemplateOutlet=\"render; context: { $implicit: i }\"></ng-container>\n  `, isInline: true, directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'countdown',\n                    template: `\n    <ng-container *ngIf=\"!render\">\n      <span [innerHTML]=\"i.text\"></span>\n    </ng-container>\n    <ng-container *ngTemplateOutlet=\"render; context: { $implicit: i }\"></ng-container>\n  `,\n                    host: { '[class.count-down]': 'true' },\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [LOCALE_ID]\n                    }] }, { type: CountdownTimer }, { type: CountdownGlobalConfig }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }];\n    }, propDecorators: { config: [{\n                type: Input\n            }], render: [{\n                type: Input\n            }], event: [{\n                type: Output\n            }] } });\n\nclass CountdownModule {\n}\nCountdownModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCountdownModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownModule, declarations: [CountdownComponent], imports: [CommonModule], exports: [CountdownComponent] });\nCountdownModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownModule, providers: [CountdownTimer], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CountdownModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    providers: [CountdownTimer],\n                    declarations: [CountdownComponent],\n                    exports: [CountdownComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CountdownComponent, CountdownGlobalConfig, CountdownModule, CountdownStatus, CountdownTimer };\n"]},"metadata":{},"sourceType":"module"}